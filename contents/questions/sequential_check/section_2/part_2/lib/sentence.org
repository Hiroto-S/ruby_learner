-課題-
コマンドラインから2つの引数を受け取って整数に変換し，その和，差，積，商をputsで表示するプログラムを作成せよ．
ARGVは引数を文字列として受け取るため，そのままでは計算には使えないことに注意．

* 配列
  - 配列とは，いくつかのオブジェクトを順序つきで格納したオブジェクトです．格納されたオブジェクトは要素と呼びます．
  - 使用方法
    - 配列作成...配列名 = [オブジェクト，オブジェクト，オブジェクト]．オブジェクトは複数格納できるが何も格納しなくても良い．
    - 要素呼び出し...配列名[index] このindexとは配列の要素番号である．
    - 要素変更...配列名[index] = オブジェクト
    - 配列の大きさ(要素数)...配列名.size

* 演算子
  - 正数(+a)
  - 負数(-a)
  - 加算(a + b)
  - 減算(a - b)
  - 乗算(a * b)
  - 除算(a / b)
  - 割り算の余り(a % b)
  - aのb乗(a ** b)

* 識別子
  - 変数やメソッド，クラスなどに付ける名前のこと．

* 変数
  - オブジェクト(数値, 文字列, 配列 etc...)を保存する箱．中身を書き換えることが可能．
  - 以下の変数の種類は，現時点では読まなくても良い．
** ローカル変数
   - 小文字またはアンダーバー(_)で始まる識別子．ブロック内、メソッド内などローカルなスコープで有効.
** インスタンス変数
   - アットマーク(@) で始まる識別子．インスタンスされたクラス等で，そのオブジェクトが存在する間有効．
** クラス変数
   - 2つのアットマーク(@@) で始まる識別子．同じクラスのすべてのインスタンスで共有される．

* 定数
  - アルファベット大文字で始まる識別子．
  - オブジェクト(数値, 文字列, 配列 etc...)を保存する箱．中身を書き換えることは可能であるが警告文が表示される．

* 標準入力
  - 標準入力とはキーボード入力のことです．
  - 標準入力を行えるメソッドの紹介．
** STDIN
   - 標準入力のレシーバー
** レシーバー
   - ドット(.)の左側
** gets
   - get string の略
   - 使用方法...変数 = STDIN.gets
   - 機能...標準入力にキーボード入力された1行の文字列を取得する.
** readlines
   - 使用方法...変数 = STDIN.readlines
   - 機能...キーボードから複数行の文字列を，1行ごとの配列として取得する．入力を終了する場合はCtrl+Dを行う．
** ARGV
   - 使用方法...変数 = ARGV[index]，このindexとは配列の要素番号である．
     ex) 「ruby argv.rb a b c d 」でファイルを実行すると，ARGVという配列は「[a, b, c, d]」となる．
   - 機能...コマンドラインから引数として与えられた文字列を格納する配列オブジェクト．

* オブジェクトの変換メソッド（to_*）
  - 使用方法...オブジェクト.to_* (to_*の*の部分に入る文字は以下に記す．)
  - 機能...オブジェクトを他の型に変換する．
** to_i
   - to int
   - 整数に変換
** to_f
   - to float
   - 浮動小数点数に変換
** to_s
   - to string
   - 文字列に変換
** to_a
   - to array
   - 配列に変換
** to_h
   - to hash
   - ハッシュに変換
* chomp
  - 使用方法...「 文字列.chomp! 」 もしくは　「 変数 = 文字列.chomp 」
  - 機能...文字列の末尾の改行文字を取り除いた新しい文字列を返す.
  - この場合，感嘆符(!)の有無はレシーバーの文字列を破壊的に操作するかを決めている．
    ex) 「test = "Ruby!\n"」とした場合に「sample = test.chomp」とすると「sampleは"Ruby!"」「testは"Ruby!\n"」となる．
      　一方で，「sample = test.chomp!」とすると「sampleとtestの両方とも"Ruby!"」となる．
