-課題-
timesを用いて配列の要素を呼び出すプログラムが用意される．
その下に，新しく同じ処理を行うプログラムを追加せよ．
ただし，今度はloopを用いること．

ヒント: namesの%w[]表記に関してはテキスト参照せよ．

* %w[]表記
  - 配列の要素が全て文字列の場合，文字列ごとのシングルクオーテーション(')が必要ないこの表記を用いる．
    ex) names1 = ['tanaka', 'nakamura', 'sasaki']
        namse2 = %w[tanaka nakamura sasaki]
        namse1とnames2は同様の配列である．

* 繰り返し処理
  - 同じこと，または同じようなことを何度か繰り返したい場合に使うメソッドの紹介．
  - 以下のメソッドのeach以外の「do」は省略可能．
** while
   - 使用方法...while 条件 do
                  繰り返したい処理
                end
   - 機能...条件が「true」である間，繰り返したい処理を何度も実行する．

** until
   - 使用方法...until 条件 do
                  繰り返したい処理
      　　　　　end
   - 機能...条件が「false」である間，繰り返したい処理を何度も実行する．
** times
   - 使用方法...繰り返す回数.times do
                  繰り返したい処理
                end
   - 機能...繰り返す回数だけ，繰り返したい処理を行う．

** for
   - 使用方法...for 変数 in オブジェクト do
                  繰り返したい処理
                end
   - 機能...指定したオブジェクトの内容によって，変数に値が入り，オブジェクトの終わりまで繰り返しを行う．
   - 使用できるオブジェクトの一例を以下に記す．

*** 範囲オブジェクト
    - 範囲オブジェクトは指定した最初の値と最後の値の範囲を表すオブジェクトである．
    - 「..」演算子...「..」の左辺に最初の値を指定し右辺に最後の値を指定することでその範囲を表す．
      ex) 「2..7」の場合は2から7の範囲を表す．

    - 「...」演算子...「...」は「..」と同じ使い方ができる．ただし，範囲の最後は右辺の値は含めない．
      ex) 「2..7」の場合は2から6の範囲を表す．
*** 配列
    - 配列をforのオブジェクトにしてすると，配列の要素の数だけ繰り返しを行う．また，forの変数には繰り返しの回数と連動して配列の要素が順に代入される．
      ex) for item in ['Hello', 'Ruby.']
            puts item
          end
          
      　　出力結果
         >Hello
         >Ruby.
      　　
** each
   - 使用方法...オブジェクト.each do |変数|
      　　　　　  繰り返したい処理
                end
   - 機能...指定したオブジェクトの内容によって，変数に値が入り，オブジェクトの終わりまで繰り返しを行う．
   - forで使用できるオブジェクトはeachでも使用可能．

** loop
   - 使用方法...loop do
                  繰り返したい処理
                end
   - 機能...特別な制御を用いて繰り返しを行う．
*** 特別な制御
   - break...繰り返しを中断し，繰り返しの中から抜ける．
   - next...次の回の繰り返しに処理を移す．
   - redo...同じ条件で繰り返しをやり直す．（ほとんど使われていない．）

