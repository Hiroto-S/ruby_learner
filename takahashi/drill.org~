#+OPTIONS: ^:{} 
#+TITLE: はじめてのRuby
#+AUTHOR:  Shun Takahashi
#+LANGUAGE:  jp
#+OPTIONS:   H:4 toc:t num:2

#+SETUPFILE: /Users/bob/Github/org-html-themes/setup/theme-readtheorg-local-daddygongon.setup

* drillを作ってみる
1. まず，Listを取り出す
1. 実行結果をつける
1. コードの振る舞いを記述するタイトルをつけていく．


* print,puts,pメソッド

** List1.1 helloruby.rb

「Hello, Ruby.」という文字列を出力するプログラムを作成せよ

#+begin_src ruby
print('Hello, Ruby.\n')
#+end_src

#+begin_example
Hello, Ruby.
#+end_example

** List1.2 puts_and_p.rb

「"Hello,\n\tRuby."という文字列を出力するプログラムを作成

#+begin_src ruby
p "Hello,\n\tRuby."
#+end_src

** List1.3 kiritsubo.rb

   # かな文字を出力で表示させるだけって必要？

* 変数

** List1.4 area_volume.rb

3つの数値x、y、zを受け取り、縦x、横y、高さzの直方体の表面積と体積を求めるプログラム

#+begin_src ruby
x = ARGV[0]
y = ARGV[1]
z = ARGV[2]

area = (x*y + y*z + z*x) * 2
volume = x * y * z

print "表面積=", area, "\n"
print "体積=" volume, "\n"
#+end_src

#+begin_example
> ruby area_volume.rb 10 20 30
表面積=2200
体積=6000
#+end_example

* 条件判断

** List1.6 greater_smaller.rb

# List1.7だけで十分かも

数値を1つ引数として受け取り、それが10以上ならば「greater」、9以下ならば「smaller」と出力するプログラム

#+begin_src ruby
a = ARGV[0]

if a >= 10
  print "greater\n"
end
if a <= 9
  print "smaller\n"
end
#+end_src

#+begin_example
>ruby greater_smaller_else.rb 20
greater

>ruby greater_smaller_else.rb 5
smaller
#+end_example

** List1.7 greater_smaller_else.rb

List1.6のプログラムと同じ処理を、elseを用いて実行するプログラム

#+begin_src ruby
a = ARGV[0]

if a >= 10
  print "greater\n"
else
  print "smaller\n"
#+end_src

#+begin_example ruby
>ruby greater_smaller_else.rb 20
greater

>ruby greater_smaller_else.rb 5
smaller
#+end_example

* 繰り返し

** while文 

入力された1つの数値nを引数として受け取り、1からnまでの数を順番に表示するプログラム

#+begin_src ruby
n = ARGV[0]
i = 1
while i <= 10
  print i, "\n"
  i = i + 1
end
#+end_src

#+begin_example ruby
> ruby test.rb 5
1
2
3
4
5
#+end_example


** timesメソッド

# while文と動作での差別化難しい

「All work and no play makes Jack a dull boy.」と5行表示するプログラム

#+begin_src ruby
5.times do
  print "All work and no play makes Jack a dull boy."
end
#+end_src




* 配列

** 配列からオブジェクトを取り出す

配列のn番目の要素を取り出し、表示するプログラム

#+begin_src ruby
names = [,,]

print names[0]
#+end_src


** 配列にオブジェクトを格納する

配列の最後尾にコマンドラインに入力した要素を追加するプログラム

** 

* ハッシュ



* コマンドラインからのデータの入力
** List3.1 print_argv.rb

コマンドラインから引数を5つ入力として受け取り、出力するプログラム

#+begin_src ruby
# List3.1 print_argv.rb
puts "最初の引数: #{ARGV[0]}"
puts "2番目の引数: #{ARGV[1]}"
puts "3番目の引数: #{ARGV[2]}"
puts "4番目の引数: #{ARGV[3]}"
puts "5番目の引数: #{ARGV[4]}"
#+end_src

#+begin_example
実行例
> ruby print_argv.rb 1st 2nd 3rd 4th 5th
最初の引数: 1st
2番目の引数: 2nd
3番目の引数: 3rd
4番目の引数: 4th
5番目の引数: 5th
#+end_example



* メソッドの作成
** List3.2 hello_ruby2.rb

「Hello, Ruby.」と表示するメソッドhelloを用いて、


#+begin_src ruby
def hello
  puts "Hello, Ruby."
end

hello()
#+end_src

#+begin_example
> ruby hello_ruby2.rb
Hello, Ruby.
#+end_example


** 
