-課題-
与えられたクラス(Hello)を継承して新しくAccessHelloクラスを作成せよ．概要は以下に記す．
1. アクセスメソッドで@nameの値を変更できる機能を追加せよ．

AccessHelloクラスのインスタンスを作成し，引数に「tanaka」を与えた上でstdoutを用いて結果を出力せよ．
その後，アクセスメソッドを用いて引数の値を「nakata」に変更した上で再びstdoutを用いて結果を出力せよ．

* Class
  - Classとはオブジェクトの種類を表すものです．
    Rubyでは文字列や数値もStringクラスやIntクラスです．実際に皆さんが文字列を作成する場合は，Stringクラスのインスタンスを作成していることになります．
  - Classと一言にいってもその内容は少し複雑なので，ここでは基礎的な内容を解説します．

** インスタンス
   - 作成したクラスを使用する場合に，作られるクラスの実体です．
     その作られたクラスは一つのオブジェクトなので，そのオブジェクトをインスタンスと言います．

** 作成方法
   - クラス名は必ず大文字で始めなければならない．
   - 基本構造...class クラス名
                  クラスの定義(以下に説明する)
                end
*** initializeメソッド...
    - 機能...インスタンスが作成された時に最初に起動する処理を書く．引数はなくても良い．
    - 使用方法...def initialize(引数)
                   処理
                 end

*** インスタンスメソッド
    - 機能...インスタンスから参照できる関数．
    - 使用方法...通常の関数定義と同じ．

*** アクセスメソッド
    - 機能...インスタンス外部からインスタンス変数に関する操作を行える関数．
    - 以下の参照と更新を同時に行えるメソッド．呼び出し方法は以下の２種類とも使うことができる．
      attr_accessor :変数名
**** インスタンス変数を参照
     - 作成方法１...def 変数名
                      @変数名
                    end
     
     - 作成方法２...(クラス内のメソッド外に以下を記述)
                    attr_reader :変数名

     - 呼び出し方法...作成済みのインスタンス.変数名

**** インスタンス変数の値を更新
     - 作成方法１...def 変数名=(引数)
                      @変数名 = 引数
                    end

     - 作成方法２...(クラス内のメソッド外に以下を記述)
                    attr_writer :変数名

     - 呼び出し方法...作成済みのインスタンス.変数名 = 新しい値


*** インスタンス変数
    - 機能...作成されたインスタンス内で共有の変数．
    - 使用方法...@変数名 (initializeメソッド内で定義されることが多い)

*** 特別な変数self
    - インスタンスメソッド内で，メソッドのレシーバ自身(クラス自身)を参照する為に使われる変数．
    - 使用方法...self.クラス内のメソッドや変数

*** クラス変数
    - クラスからインスタンス化された全てのオブジェクト内で共有する変数．
    - 使用方法...@@変数名

*** メソッドの呼び出しを制限する
    - クラス内で，インスタンス化した場合に呼び出し可能にするかどうかを制限することができる．
      以下の3つの制御はインスタンスメソッドのdefの前にスペースを一つ開けて付け足すことで機能する．
    - public...メソッドをインスタンスメソッドとして使えるように公開する．
    - private...メソッドをレシーバを指定して呼び出せないようにする．
    - protected...メソッドを同一のクラスであればインスタンスメソッドとして使えるようにする．

*** 継承
    - 継承を行うことによって，既存のクラスには変更を加えずに，新しい機能を追加したり，部分的にカスタマイズしたりして新しいクラスを作ることができる．
    - 使用方法...class 新しいクラス名 < 継承するクラス名
                   追加するメソッド
                 end
